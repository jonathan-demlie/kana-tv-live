[{"/home/jonathan/Development/vercel-redirect/pages/[...postpath].tsx":"1","/home/jonathan/Development/vercel-redirect/pages/_app.tsx":"2","/home/jonathan/Development/vercel-redirect/pages/api/hello.ts":"3","/home/jonathan/Development/vercel-redirect/pages/index.tsx":"4"},{"size":2783,"mtime":1687297597105,"results":"5","hashOfConfig":"6"},{"size":188,"mtime":1687254944388,"results":"7","hashOfConfig":"6"},{"size":307,"mtime":1687254944388,"results":"8","hashOfConfig":"6"},{"size":2287,"mtime":1687254944388,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"1u1r5rn",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jonathan/Development/vercel-redirect/pages/[...postpath].tsx",["23"],[],"import React from 'react';\nimport Head from 'next/head';\nimport { GetServerSideProps } from 'next';\nimport { GraphQLClient, gql } from 'graphql-request';\n\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\n\tconst endpoint = process.env.GRAPHQL_ENDPOINT as string;\n\tconst graphQLClient = new GraphQLClient(endpoint);\n\tconst referringURL = ctx.req.headers?.referer || null;\n\tconst pathArr = ctx.query.postpath as Array<string>;\n\tconst path = pathArr.join('/');\n\tconsole.log(path);\n\tconst fbclid = ctx.query.fbclid;\n\n\t// redirect if facebook is the referer or request contains fbclid\n\tif (referringURL?.includes('facebook.com') || fbclid) {\n\t\treturn {\n\t\t\tredirect: {\n\t\t\t\tpermanent: false,\n\t\t\t\tdestination: `${\n\t\t\t\t\tendpoint.replace(/(\\/graphql\\/)/, '/') + encodeURI(path as string)\n\t\t\t\t}`,\n\t\t\t},\n\t\t};\n\t}\n\tconst query = gql`\n\t\t{\n\t\t\tpost(id: \"/${path}/\", idType: URI) {\n\t\t\t\tid\n\t\t\t\texcerpt\n\t\t\t\ttitle\n\t\t\t\tlink\n\t\t\t\tdateGmt\n\t\t\t\tmodifiedGmt\n\t\t\t\tcontent\n\t\t\t\tauthor {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfeaturedImage {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tsourceUrl\n\t\t\t\t\t\taltText\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n\n\tconst data = await graphQLClient.request(query);\n\tif (!data.post) {\n\t\treturn {\n\t\t\tnotFound: true,\n\t\t};\n\t}\n\treturn {\n\t\tprops: {\n\t\t\tpath,\n\t\t\tpost: data.post,\n\t\t\thost: ctx.req.headers.host,\n\t\t},\n\t};\n};\n\ninterface PostProps {\n\tpost: any;\n\thost: string;\n\tpath: string;\n}\n\nconst Post: React.FC<PostProps> = (props) => {\n\tconst { post, host, path } = props;\n\n\t// to remove tags from excerpt\n\tconst removeTags = (str: string) => {\n\t\tif (str === null || str === '') return '';\n\t\telse str = str.toString();\n\t\treturn str.replace(/(<([^>]+)>)/gi, '').replace(/\\[[^\\]]*\\]/, '');\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Head>\n\t\t\t\t<meta property=\"og:title\" content={post.title} />\n\t\t\t\t<link rel=\"canonical\" href={`https://${host}/${path}`} />\n\t\t\t\t<meta property=\"og:description\" content={removeTags(post.excerpt)} />\n\t\t\t\t<meta property=\"og:url\" content={`https://${host}/${path}`} />\n\t\t\t\t<meta property=\"og:type\" content=\"article\" />\n\t\t\t\t<meta property=\"og:locale\" content=\"en_US\" />\n\t\t\t\t<meta property=\"og:site_name\" content={host.split('.')[0]} />\n\t\t\t\t<meta property=\"article:published_time\" content={post.dateGmt} />\n\t\t\t\t<meta property=\"article:modified_time\" content={post.modifiedGmt} />\n\t\t\t\t<meta property=\"og:image\" content={post.featuredImage.node.sourceUrl} />\n\t\t\t\t<meta\n\t\t\t\t\tproperty=\"og:image:alt\"\n\t\t\t\t\tcontent={post.featuredImage.node.altText || post.title}\n\t\t\t\t/>\n\t\t\t\t<title>{post.title}</title>\n\t\t\t</Head>\n\t\t\t<div className=\"post-container\">\n\t\t\t\t<h1>{post.title}</h1>\n\t\t\t\t<img\n\t\t\t\t\tsrc={post.featuredImage.node.sourceUrl}\n\t\t\t\t\talt={post.featuredImage.node.altText || post.title}\n\t\t\t\t/>\n\t\t\t\t<article dangerouslySetInnerHTML={{ __html: post.content }} />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Post;\n","/home/jonathan/Development/vercel-redirect/pages/_app.tsx",[],[],"/home/jonathan/Development/vercel-redirect/pages/api/hello.ts",[],[],"/home/jonathan/Development/vercel-redirect/pages/index.tsx",[],[],{"ruleId":"24","severity":1,"message":"25","line":103,"column":5,"nodeType":"26","endLine":106,"endColumn":7},"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement"]